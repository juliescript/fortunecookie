'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const NUMERIC = "numeric";
const LONG = "long";
const SHORT = "short";
const TWODIGIT = "2-digit";
const FULL = "full";
let resolvedPatterns = new Map();
class DateTimeFormat$1 {
    constructor(locale, options, pattern) {
        this.locale = locale;
        this.options = options;
        this.pattern = pattern;
        this.dateTimeFormatElements = {
            "M": "month",
            "E": "weekday",
            "c": "weekday",
            "d": "day",
            "y": "year",
            "h": "hour",
            "H": "hour",
            "m": "minute",
            "s": "second",
            "z": "timeZoneName",
            "G": "era",
            "a": "hour12"
        };
        if (options && options.minute === NUMERIC) {
            this.options.minute = TWODIGIT;
        }
        if (options && options.hour === NUMERIC) {
            this.options.hour = TWODIGIT;
        }
    }
    hasTimeOptions(options) {
        return options.hour !== undefined || options.minute !== undefined || options.second !== undefined;
    }
    hasDateOptions(options) {
        return options.weekday !== undefined ||
            options.year !== undefined ||
            options.month !== undefined ||
            options.day !== undefined;
    }
    useFullDatePattern(intlOptions) {
        let i;
        let propsArray = Object.keys(intlOptions);
        let propsArrayLength = propsArray.length;
        let result = false;
        for (i = 0; i < propsArrayLength; i++) {
            if (intlOptions[propsArray[i]] === LONG || intlOptions[propsArray[i]] === SHORT) {
                result = true;
                break;
            }
        }
        return result;
    }
    getNativePattern(patternDefinition, locale) {
        return "";
    }
    getCorrectPatternForLocale() {
        let dateTimePatternOptions = {};
        if (this.hasDateOptions(this.options)) {
            if (this.useFullDatePattern(this.options)) {
                dateTimePatternOptions.date = FULL;
            }
            else {
                dateTimePatternOptions.date = SHORT;
            }
        }
        if (this.hasTimeOptions(this.options)) {
            dateTimePatternOptions.time = FULL;
        }
        let result = this.getNativePattern(dateTimePatternOptions, this.locale);
        if (this.options.hour) {
            if (this.options.hour12 !== undefined) {
                result = this.options.hour12 ? result.replace(/H/g, "h") : result.replace(/h/g, "H");
            }
            else {
                this.options.hour12 = !(result.indexOf("H") > -1);
            }
        }
        return result;
    }
    getDateElementsFromPattern(pattern) {
        let result = [];
        let patternLength = pattern.length;
        let i = 0;
        let stringInsidePattern = false;
        while (i < patternLength) {
            if (pattern[i] === '"' || pattern[i] === "'") {
                let p = i + 1;
                while (p < patternLength && pattern[i] !== pattern[p]) {
                    p++;
                }
                for (let j = i; j < p + 1; j++) {
                    result.push({
                        "isDateElement": false,
                        "patternValue": pattern[j]
                    });
                }
                i = p + 1;
                continue;
            }
            if (this.dateTimeFormatElements.hasOwnProperty(pattern[i])) {
                let j = i;
                while (i < patternLength && pattern[i] === pattern[j]) {
                    i++;
                }
                result.push({
                    "isDateElement": true,
                    "patternValue": pattern.substr(j, i - j),
                    "intlOption": this.dateTimeFormatElements[pattern[j]]
                });
            }
            else {
                result.push({
                    "isDateElement": false,
                    "patternValue": pattern[i]
                });
                i++;
            }
        }
        return result;
    }
    prepareDateElement(intlOption, dateElement) {
        switch (intlOption) {
            case NUMERIC:
                return dateElement;
            case TWODIGIT:
                return dateElement.repeat(2);
            case SHORT:
                return dateElement.repeat(3);
            case LONG:
                return dateElement.repeat(4);
            case true:
                return dateElement;
            case false:
                return "";
            default:
                return dateElement;
        }
    }
    preparePattern(pattern, options) {
        let patternOptions = this.getDateElementsFromPattern(pattern);
        let patternOptionsLength = patternOptions.length;
        for (let i = 0; i < patternOptionsLength; i++) {
            if (patternOptions[i].isDateElement) {
                let formatChar = patternOptions[i].patternValue[0];
                let intlOptionValue = options[patternOptions[i].intlOption];
                if (intlOptionValue !== undefined) {
                    let newPatternValue = this.prepareDateElement(intlOptionValue, formatChar);
                    patternOptions[i].patternValue = newPatternValue;
                }
                else {
                    if (i > 0) {
                        let j = i - 1;
                        while (patternOptions[j] && patternOptions[j].isDateElement === false) {
                            if (patternOptions[j].patternValue !== " ") {
                                if (patternOptions[j].patternValue !== '"' && patternOptions[j].patternValue !== "'") {
                                    patternOptions[j].patternValue = "";
                                }
                                break;
                            }
                            else {
                                patternOptions[j].patternValue = "";
                            }
                            j--;
                        }
                    }
                    patternOptions[i].patternValue = "";
                }
            }
        }
        let result = [];
        let i = 0;
        while (patternOptions[i].patternValue === "" || patternOptions[i].isDateElement === false) {
            i++;
        }
        for (i; i < patternOptionsLength; i++) {
            result.push(patternOptions[i].patternValue);
        }
        return result.join("");
    }
    formatNative(pattern, locale, date) {
        return "";
    }
    get preparedPattern() {
        if (!this._preparedPattern) {
            if (this.pattern) {
                this._preparedPattern = this.pattern;
            }
            else {
                if (resolvedPatterns.has({ locale: this.locale, options: this.options })) {
                    this._preparedPattern = resolvedPatterns.get({ locale: this.locale, options: this.options });
                }
                else {
                    this._preparedPattern = this.preparePattern(this.getCorrectPatternForLocale(), this.options);
                    resolvedPatterns.set({ locale: this.locale, options: this.options }, this._preparedPattern);
                }
            }
        }
        return this._preparedPattern;
    }
    format(date) {
        return this.formatNative(this.preparedPattern, this.locale, date);
    }
}
class NumberFormat$1 {
    constructor(locale, options, pattern) {
        this.locale = locale;
        this.options = options;
        this.pattern = pattern;
    }
    formatNative(value, locale, options, pattern) {
        return "";
    }
    format(value) {
        return this.formatNative(value, this.locale, this.options, this.pattern);
    }
}

let localesCache = new Map();
function getNativeLocale(locale) {
    if (localesCache.has(locale)) {
        return localesCache.get(locale);
    }
    let result;
    if (locale) {
        locale = locale.replace(/_/g, "-");
        let firstHypenIndex = locale.indexOf("-");
        let lang = "";
        let country = "";
        if (firstHypenIndex > -1) {
            lang = locale.substr(0, firstHypenIndex);
            let nextHypenIndex = locale.substr(firstHypenIndex + 1).indexOf("-");
            country = locale.substr(firstHypenIndex + 1, (nextHypenIndex > -1) ? nextHypenIndex : undefined);
        }
        else {
            lang = locale;
        }
        if (country !== "") {
            result = new java.util.Locale(lang, country);
        }
        else {
            result = new java.util.Locale(lang);
        }
    }
    else {
        result = new java.util.Locale("en", "US");
    }
    localesCache.set(locale, result);
    return result;
}
class DateTimeFormat$$1 extends DateTimeFormat$1 {
    getNativePattern(patternDefinition, locale) {
        let result = "";
        let flag = 0;
        let nativeLocale;
        if (locale) {
            nativeLocale = getNativeLocale(locale);
            flag++;
        }
        if (patternDefinition.date) {
            flag = flag + 2;
        }
        if (patternDefinition.time) {
            flag = flag + 4;
        }
        let dateFormat;
        switch (flag) {
            case 0:
                dateFormat = java.text.DateFormat.getDateTimeInstance();
                break;
            case 1:
                dateFormat = java.text.DateFormat.getDateTimeInstance(0, 0, nativeLocale);
                break;
            case 2:
                dateFormat = java.text.DateFormat.getDateInstance(patternDefinition.date === FULL ? 0 : 3);
                break;
            case 3:
                dateFormat =
                    java.text.DateFormat.getDateInstance(patternDefinition.date === FULL ? 0 : 3, nativeLocale);
                break;
            case 4:
                dateFormat = java.text.DateFormat.getTimeInstance(1);
                break;
            case 5:
                dateFormat = java.text.DateFormat.getTimeInstance(1, nativeLocale);
                break;
            case 6:
                dateFormat = java.text.DateFormat.getDateTimeInstance(patternDefinition.date === FULL ? 0 : 3, 1);
                break;
            case 7:
                dateFormat =
                    java.text.DateFormat.getDateTimeInstance(patternDefinition.date === FULL ? 0 : 3, 1, nativeLocale);
                break;
            default:
                break;
        }
        result = dateFormat.toPattern();
        return result;
    }
    formatNative(pattern, locale, date) {
        let sdf = locale ?
            new java.text.SimpleDateFormat(pattern, getNativeLocale(locale)) :
            new java.text.SimpleDateFormat(pattern);
        return sdf.format(date ? new java.util.Date(date.valueOf()) : new java.util.Date()).toString();
    }
}
class NumberFormat$$1 extends NumberFormat$1 {
    formatNative(value, locale, options, pattern) {
        let numberFormat;
        if (pattern) {
            numberFormat = new java.text.DecimalFormat(pattern);
        }
        else {
            if (options) {
                switch (options.style.toLowerCase()) {
                    case "decimal":
                        numberFormat = java.text.NumberFormat.getNumberInstance(getNativeLocale(locale));
                        break;
                    case "percent":
                        numberFormat = java.text.NumberFormat.getPercentInstance(getNativeLocale(locale));
                        break;
                    case "currency":
                        numberFormat = java.text.NumberFormat.getCurrencyInstance(getNativeLocale(locale));
                        if (options.currency !== void 0) {
                            numberFormat.setCurrency(java.util.Currency.getInstance(options.currency));
                        }
                        break;
                    default:
                        numberFormat = java.text.NumberFormat.getNumberInstance(getNativeLocale(locale));
                        break;
                }
            }
            else {
                numberFormat = java.text.NumberFormat.getNumberInstance(getNativeLocale(locale));
            }
        }
        if (options && options.minimumIntegerDigits !== void 0) {
            numberFormat.setMinimumIntegerDigits(options.minimumIntegerDigits);
        }
        if (options && options.minimumFractionDigits !== void 0) {
            numberFormat.setMinimumFractionDigits(options.minimumFractionDigits);
        }
        if (options && options.maximumFractionDigits !== void 0) {
            numberFormat.setMaximumFractionDigits(options.maximumFractionDigits);
        }
        if (options && options.useGrouping !== void 0) {
            numberFormat.setGroupingUsed(options.useGrouping);
        }
        let decimalFormatSymbols = locale ?
            new java.text.DecimalFormatSymbols(getNativeLocale(locale)) :
            new java.text.DecimalFormatSymbols();
        numberFormat.setDecimalFormatSymbols(decimalFormatSymbols);
        if (options && (options.style.toLowerCase() === "currency" && options.currencyDisplay === "code")) {
            if (!pattern) {
                let currrentPattern = numberFormat.toPattern();
                currrentPattern = currrentPattern.replace("¤", "¤¤");
                numberFormat = new java.text.DecimalFormat(currrentPattern);
                numberFormat.setDecimalFormatSymbols(decimalFormatSymbols);
            }
            if (options.currency !== void 0) {
                decimalFormatSymbols.setCurrency(java.util.Currency.getInstance(options.currency));
            }
        }
        return numberFormat.format(value);
    }
}

if (!global.Intl) {
    global.Intl = {};
}
global.Intl.DateTimeFormat = DateTimeFormat$$1;
global.Intl.NumberFormat = NumberFormat$$1;

exports.DateTimeFormat = DateTimeFormat$$1;
exports.NumberFormat = NumberFormat$$1;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

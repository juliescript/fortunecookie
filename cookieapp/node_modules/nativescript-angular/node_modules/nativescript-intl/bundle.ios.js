'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const NUMERIC = "numeric";
const LONG = "long";
const SHORT = "short";
const TWODIGIT = "2-digit";
const FULL = "full";
let resolvedPatterns = new Map();
class DateTimeFormat$1 {
    constructor(locale, options, pattern) {
        this.locale = locale;
        this.options = options;
        this.pattern = pattern;
        this.dateTimeFormatElements = {
            "M": "month",
            "E": "weekday",
            "c": "weekday",
            "d": "day",
            "y": "year",
            "h": "hour",
            "H": "hour",
            "m": "minute",
            "s": "second",
            "z": "timeZoneName",
            "G": "era",
            "a": "hour12"
        };
        if (options && options.minute === NUMERIC) {
            this.options.minute = TWODIGIT;
        }
        if (options && options.hour === NUMERIC) {
            this.options.hour = TWODIGIT;
        }
    }
    hasTimeOptions(options) {
        return options.hour !== undefined || options.minute !== undefined || options.second !== undefined;
    }
    hasDateOptions(options) {
        return options.weekday !== undefined ||
            options.year !== undefined ||
            options.month !== undefined ||
            options.day !== undefined;
    }
    useFullDatePattern(intlOptions) {
        let i;
        let propsArray = Object.keys(intlOptions);
        let propsArrayLength = propsArray.length;
        let result = false;
        for (i = 0; i < propsArrayLength; i++) {
            if (intlOptions[propsArray[i]] === LONG || intlOptions[propsArray[i]] === SHORT) {
                result = true;
                break;
            }
        }
        return result;
    }
    getNativePattern(patternDefinition, locale) {
        return "";
    }
    getCorrectPatternForLocale() {
        let dateTimePatternOptions = {};
        if (this.hasDateOptions(this.options)) {
            if (this.useFullDatePattern(this.options)) {
                dateTimePatternOptions.date = FULL;
            }
            else {
                dateTimePatternOptions.date = SHORT;
            }
        }
        if (this.hasTimeOptions(this.options)) {
            dateTimePatternOptions.time = FULL;
        }
        let result = this.getNativePattern(dateTimePatternOptions, this.locale);
        if (this.options.hour) {
            if (this.options.hour12 !== undefined) {
                result = this.options.hour12 ? result.replace(/H/g, "h") : result.replace(/h/g, "H");
            }
            else {
                this.options.hour12 = !(result.indexOf("H") > -1);
            }
        }
        return result;
    }
    getDateElementsFromPattern(pattern) {
        let result = [];
        let patternLength = pattern.length;
        let i = 0;
        let stringInsidePattern = false;
        while (i < patternLength) {
            if (pattern[i] === '"' || pattern[i] === "'") {
                let p = i + 1;
                while (p < patternLength && pattern[i] !== pattern[p]) {
                    p++;
                }
                for (let j = i; j < p + 1; j++) {
                    result.push({
                        "isDateElement": false,
                        "patternValue": pattern[j]
                    });
                }
                i = p + 1;
                continue;
            }
            if (this.dateTimeFormatElements.hasOwnProperty(pattern[i])) {
                let j = i;
                while (i < patternLength && pattern[i] === pattern[j]) {
                    i++;
                }
                result.push({
                    "isDateElement": true,
                    "patternValue": pattern.substr(j, i - j),
                    "intlOption": this.dateTimeFormatElements[pattern[j]]
                });
            }
            else {
                result.push({
                    "isDateElement": false,
                    "patternValue": pattern[i]
                });
                i++;
            }
        }
        return result;
    }
    prepareDateElement(intlOption, dateElement) {
        switch (intlOption) {
            case NUMERIC:
                return dateElement;
            case TWODIGIT:
                return dateElement.repeat(2);
            case SHORT:
                return dateElement.repeat(3);
            case LONG:
                return dateElement.repeat(4);
            case true:
                return dateElement;
            case false:
                return "";
            default:
                return dateElement;
        }
    }
    preparePattern(pattern, options) {
        let patternOptions = this.getDateElementsFromPattern(pattern);
        let patternOptionsLength = patternOptions.length;
        for (let i = 0; i < patternOptionsLength; i++) {
            if (patternOptions[i].isDateElement) {
                let formatChar = patternOptions[i].patternValue[0];
                let intlOptionValue = options[patternOptions[i].intlOption];
                if (intlOptionValue !== undefined) {
                    let newPatternValue = this.prepareDateElement(intlOptionValue, formatChar);
                    patternOptions[i].patternValue = newPatternValue;
                }
                else {
                    if (i > 0) {
                        let j = i - 1;
                        while (patternOptions[j] && patternOptions[j].isDateElement === false) {
                            if (patternOptions[j].patternValue !== " ") {
                                if (patternOptions[j].patternValue !== '"' && patternOptions[j].patternValue !== "'") {
                                    patternOptions[j].patternValue = "";
                                }
                                break;
                            }
                            else {
                                patternOptions[j].patternValue = "";
                            }
                            j--;
                        }
                    }
                    patternOptions[i].patternValue = "";
                }
            }
        }
        let result = [];
        let i = 0;
        while (patternOptions[i].patternValue === "" || patternOptions[i].isDateElement === false) {
            i++;
        }
        for (i; i < patternOptionsLength; i++) {
            result.push(patternOptions[i].patternValue);
        }
        return result.join("");
    }
    formatNative(pattern, locale, date) {
        return "";
    }
    get preparedPattern() {
        if (!this._preparedPattern) {
            if (this.pattern) {
                this._preparedPattern = this.pattern;
            }
            else {
                if (resolvedPatterns.has({ locale: this.locale, options: this.options })) {
                    this._preparedPattern = resolvedPatterns.get({ locale: this.locale, options: this.options });
                }
                else {
                    this._preparedPattern = this.preparePattern(this.getCorrectPatternForLocale(), this.options);
                    resolvedPatterns.set({ locale: this.locale, options: this.options }, this._preparedPattern);
                }
            }
        }
        return this._preparedPattern;
    }
    format(date) {
        return this.formatNative(this.preparedPattern, this.locale, date);
    }
}
class NumberFormat$1 {
    constructor(locale, options, pattern) {
        this.locale = locale;
        this.options = options;
        this.pattern = pattern;
    }
    formatNative(value, locale, options, pattern) {
        return "";
    }
    format(value) {
        return this.formatNative(value, this.locale, this.options, this.pattern);
    }
}

class DateTimeFormat$$1 extends DateTimeFormat$1 {
    getNativePattern(patternDefinition, locale) {
        let dateFormatter = NSDateFormatter.new();
        if (locale) {
            dateFormatter.locale = NSLocale.alloc().initWithLocaleIdentifier(locale);
        }
        if (patternDefinition.date) {
            dateFormatter.dateStyle = patternDefinition.date === FULL ?
                4 :
                1;
        }
        if (patternDefinition.time) {
            dateFormatter.timeStyle = 3;
        }
        return dateFormatter.dateFormat;
    }
    formatNative(pattern, locale, date) {
        let dateFormatter = NSDateFormatter.new();
        if (locale) {
            dateFormatter.locale = NSLocale.alloc().initWithLocaleIdentifier(locale);
        }
        dateFormatter.dateFormat = pattern;
        return dateFormatter.stringFromDate(date ? date : new Date());
    }
}
class NumberFormat$$1 extends NumberFormat$1 {
    formatNative(value, locale, options, pattern) {
        let numberFormat = NSNumberFormatter.new();
        if (locale) {
            numberFormat.locale = NSLocale.alloc().initWithLocaleIdentifier(locale);
        }
        if (options) {
            switch (options.style.toLowerCase()) {
                case "decimal":
                    numberFormat.numberStyle = 1;
                    break;
                case "percent":
                    numberFormat.numberStyle = 3;
                    break;
                case "currency":
                    numberFormat.numberStyle = 2;
                    if (options.currency !== void 0) {
                        numberFormat.currencyCode = options.currency;
                    }
                    break;
                default:
                    numberFormat.numberStyle = 1;
                    break;
            }
        }
        else {
            numberFormat.numberStyle = 1;
        }
        if (options && options.minimumIntegerDigits !== void 0) {
            numberFormat.minimumIntegerDigits = options.minimumIntegerDigits;
        }
        if (options && options.minimumFractionDigits !== void 0) {
            numberFormat.minimumFractionDigits = options.minimumFractionDigits;
        }
        if (options && options.maximumFractionDigits !== void 0) {
            numberFormat.maximumFractionDigits = options.maximumFractionDigits;
        }
        if (options && options.useGrouping !== void 0) {
            numberFormat.usesGroupingSeparator = options.useGrouping;
        }
        if (pattern) {
            numberFormat.positiveFormat = pattern;
        }
        else {
            if (options && (options.style.toLowerCase() === "currency" && options.currencyDisplay === "code")) {
                let tempPattern = numberFormat.positiveFormat;
                tempPattern = tempPattern.replace("¤", "¤¤");
                numberFormat.positiveFormat = tempPattern;
            }
        }
        return numberFormat.stringFromNumber(value);
    }
}

if (!global.Intl) {
    global.Intl = {};
}
global.Intl.DateTimeFormat = DateTimeFormat$$1;
global.Intl.NumberFormat = NumberFormat$$1;

exports.DateTimeFormat = DateTimeFormat$$1;
exports.NumberFormat = NumberFormat$$1;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLmlvcy5qcyIsInNvdXJjZXMiOlsibmF0aXZlc2NyaXB0LWludGwtY29tbW9uLmpzIiwibmF0aXZlc2NyaXB0LWludGwuaW9zLmpzIiwiaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IE5VTUVSSUMgPSBcIm51bWVyaWNcIjtcclxuZXhwb3J0IGNvbnN0IExPTkcgPSBcImxvbmdcIjtcclxuZXhwb3J0IGNvbnN0IFNIT1JUID0gXCJzaG9ydFwiO1xyXG5leHBvcnQgY29uc3QgVFdPRElHSVQgPSBcIjItZGlnaXRcIjtcclxuZXhwb3J0IGNvbnN0IEZVTEwgPSBcImZ1bGxcIjtcclxuZXhwb3J0IGxldCByZXNvbHZlZFBhdHRlcm5zID0gbmV3IE1hcCgpO1xyXG5leHBvcnQgY2xhc3MgRGF0ZVRpbWVGb3JtYXQge1xyXG4gICAgY29uc3RydWN0b3IobG9jYWxlLCBvcHRpb25zLCBwYXR0ZXJuKSB7XHJcbiAgICAgICAgdGhpcy5sb2NhbGUgPSBsb2NhbGU7XHJcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcclxuICAgICAgICB0aGlzLnBhdHRlcm4gPSBwYXR0ZXJuO1xyXG4gICAgICAgIHRoaXMuZGF0ZVRpbWVGb3JtYXRFbGVtZW50cyA9IHtcclxuICAgICAgICAgICAgXCJNXCI6IFwibW9udGhcIixcclxuICAgICAgICAgICAgXCJFXCI6IFwid2Vla2RheVwiLFxyXG4gICAgICAgICAgICBcImNcIjogXCJ3ZWVrZGF5XCIsXHJcbiAgICAgICAgICAgIFwiZFwiOiBcImRheVwiLFxyXG4gICAgICAgICAgICBcInlcIjogXCJ5ZWFyXCIsXHJcbiAgICAgICAgICAgIFwiaFwiOiBcImhvdXJcIixcclxuICAgICAgICAgICAgXCJIXCI6IFwiaG91clwiLFxyXG4gICAgICAgICAgICBcIm1cIjogXCJtaW51dGVcIixcclxuICAgICAgICAgICAgXCJzXCI6IFwic2Vjb25kXCIsXHJcbiAgICAgICAgICAgIFwielwiOiBcInRpbWVab25lTmFtZVwiLFxyXG4gICAgICAgICAgICBcIkdcIjogXCJlcmFcIixcclxuICAgICAgICAgICAgXCJhXCI6IFwiaG91cjEyXCJcclxuICAgICAgICB9O1xyXG4gICAgICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMubWludXRlID09PSBOVU1FUklDKSB7XHJcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucy5taW51dGUgPSBUV09ESUdJVDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5ob3VyID09PSBOVU1FUklDKSB7XHJcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucy5ob3VyID0gVFdPRElHSVQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaGFzVGltZU9wdGlvbnMob3B0aW9ucykge1xyXG4gICAgICAgIHJldHVybiBvcHRpb25zLmhvdXIgIT09IHVuZGVmaW5lZCB8fCBvcHRpb25zLm1pbnV0ZSAhPT0gdW5kZWZpbmVkIHx8IG9wdGlvbnMuc2Vjb25kICE9PSB1bmRlZmluZWQ7XHJcbiAgICB9XHJcbiAgICBoYXNEYXRlT3B0aW9ucyhvcHRpb25zKSB7XHJcbiAgICAgICAgcmV0dXJuIG9wdGlvbnMud2Vla2RheSAhPT0gdW5kZWZpbmVkIHx8XHJcbiAgICAgICAgICAgIG9wdGlvbnMueWVhciAhPT0gdW5kZWZpbmVkIHx8XHJcbiAgICAgICAgICAgIG9wdGlvbnMubW9udGggIT09IHVuZGVmaW5lZCB8fFxyXG4gICAgICAgICAgICBvcHRpb25zLmRheSAhPT0gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG4gICAgdXNlRnVsbERhdGVQYXR0ZXJuKGludGxPcHRpb25zKSB7XHJcbiAgICAgICAgbGV0IGk7XHJcbiAgICAgICAgbGV0IHByb3BzQXJyYXkgPSBPYmplY3Qua2V5cyhpbnRsT3B0aW9ucyk7XHJcbiAgICAgICAgbGV0IHByb3BzQXJyYXlMZW5ndGggPSBwcm9wc0FycmF5Lmxlbmd0aDtcclxuICAgICAgICBsZXQgcmVzdWx0ID0gZmFsc2U7XHJcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHByb3BzQXJyYXlMZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoaW50bE9wdGlvbnNbcHJvcHNBcnJheVtpXV0gPT09IExPTkcgfHwgaW50bE9wdGlvbnNbcHJvcHNBcnJheVtpXV0gPT09IFNIT1JUKSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuICAgIGdldE5hdGl2ZVBhdHRlcm4ocGF0dGVybkRlZmluaXRpb24sIGxvY2FsZSkge1xyXG4gICAgICAgIHJldHVybiBcIlwiO1xyXG4gICAgfVxyXG4gICAgZ2V0Q29ycmVjdFBhdHRlcm5Gb3JMb2NhbGUoKSB7XHJcbiAgICAgICAgbGV0IGRhdGVUaW1lUGF0dGVybk9wdGlvbnMgPSB7fTtcclxuICAgICAgICBpZiAodGhpcy5oYXNEYXRlT3B0aW9ucyh0aGlzLm9wdGlvbnMpKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnVzZUZ1bGxEYXRlUGF0dGVybih0aGlzLm9wdGlvbnMpKSB7XHJcbiAgICAgICAgICAgICAgICBkYXRlVGltZVBhdHRlcm5PcHRpb25zLmRhdGUgPSBGVUxMO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZGF0ZVRpbWVQYXR0ZXJuT3B0aW9ucy5kYXRlID0gU0hPUlQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuaGFzVGltZU9wdGlvbnModGhpcy5vcHRpb25zKSkge1xyXG4gICAgICAgICAgICBkYXRlVGltZVBhdHRlcm5PcHRpb25zLnRpbWUgPSBGVUxMO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgcmVzdWx0ID0gdGhpcy5nZXROYXRpdmVQYXR0ZXJuKGRhdGVUaW1lUGF0dGVybk9wdGlvbnMsIHRoaXMubG9jYWxlKTtcclxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmhvdXIpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5ob3VyMTIgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5vcHRpb25zLmhvdXIxMiA/IHJlc3VsdC5yZXBsYWNlKC9IL2csIFwiaFwiKSA6IHJlc3VsdC5yZXBsYWNlKC9oL2csIFwiSFwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucy5ob3VyMTIgPSAhKHJlc3VsdC5pbmRleE9mKFwiSFwiKSA+IC0xKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG4gICAgZ2V0RGF0ZUVsZW1lbnRzRnJvbVBhdHRlcm4ocGF0dGVybikge1xyXG4gICAgICAgIGxldCByZXN1bHQgPSBbXTtcclxuICAgICAgICBsZXQgcGF0dGVybkxlbmd0aCA9IHBhdHRlcm4ubGVuZ3RoO1xyXG4gICAgICAgIGxldCBpID0gMDtcclxuICAgICAgICBsZXQgc3RyaW5nSW5zaWRlUGF0dGVybiA9IGZhbHNlO1xyXG4gICAgICAgIHdoaWxlIChpIDwgcGF0dGVybkxlbmd0aCkge1xyXG4gICAgICAgICAgICBpZiAocGF0dGVybltpXSA9PT0gJ1wiJyB8fCBwYXR0ZXJuW2ldID09PSBcIidcIikge1xyXG4gICAgICAgICAgICAgICAgbGV0IHAgPSBpICsgMTtcclxuICAgICAgICAgICAgICAgIHdoaWxlIChwIDwgcGF0dGVybkxlbmd0aCAmJiBwYXR0ZXJuW2ldICE9PSBwYXR0ZXJuW3BdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcCsrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IGk7IGogPCBwICsgMTsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBcImlzRGF0ZUVsZW1lbnRcIjogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwicGF0dGVyblZhbHVlXCI6IHBhdHRlcm5bal1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGkgPSBwICsgMTtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmRhdGVUaW1lRm9ybWF0RWxlbWVudHMuaGFzT3duUHJvcGVydHkocGF0dGVybltpXSkpIHtcclxuICAgICAgICAgICAgICAgIGxldCBqID0gaTtcclxuICAgICAgICAgICAgICAgIHdoaWxlIChpIDwgcGF0dGVybkxlbmd0aCAmJiBwYXR0ZXJuW2ldID09PSBwYXR0ZXJuW2pdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaSsrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgIFwiaXNEYXRlRWxlbWVudFwiOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIFwicGF0dGVyblZhbHVlXCI6IHBhdHRlcm4uc3Vic3RyKGosIGkgLSBqKSxcclxuICAgICAgICAgICAgICAgICAgICBcImludGxPcHRpb25cIjogdGhpcy5kYXRlVGltZUZvcm1hdEVsZW1lbnRzW3BhdHRlcm5bal1dXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICBcImlzRGF0ZUVsZW1lbnRcIjogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJwYXR0ZXJuVmFsdWVcIjogcGF0dGVybltpXVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBpKys7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuICAgIHByZXBhcmVEYXRlRWxlbWVudChpbnRsT3B0aW9uLCBkYXRlRWxlbWVudCkge1xyXG4gICAgICAgIHN3aXRjaCAoaW50bE9wdGlvbikge1xyXG4gICAgICAgICAgICBjYXNlIE5VTUVSSUM6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0ZUVsZW1lbnQ7XHJcbiAgICAgICAgICAgIGNhc2UgVFdPRElHSVQ6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0ZUVsZW1lbnQucmVwZWF0KDIpO1xyXG4gICAgICAgICAgICBjYXNlIFNIT1JUOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGVFbGVtZW50LnJlcGVhdCgzKTtcclxuICAgICAgICAgICAgY2FzZSBMT05HOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGVFbGVtZW50LnJlcGVhdCg0KTtcclxuICAgICAgICAgICAgY2FzZSB0cnVlOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGVFbGVtZW50O1xyXG4gICAgICAgICAgICBjYXNlIGZhbHNlOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiXCI7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0ZUVsZW1lbnQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcHJlcGFyZVBhdHRlcm4ocGF0dGVybiwgb3B0aW9ucykge1xyXG4gICAgICAgIGxldCBwYXR0ZXJuT3B0aW9ucyA9IHRoaXMuZ2V0RGF0ZUVsZW1lbnRzRnJvbVBhdHRlcm4ocGF0dGVybik7XHJcbiAgICAgICAgbGV0IHBhdHRlcm5PcHRpb25zTGVuZ3RoID0gcGF0dGVybk9wdGlvbnMubGVuZ3RoO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGF0dGVybk9wdGlvbnNMZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAocGF0dGVybk9wdGlvbnNbaV0uaXNEYXRlRWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgbGV0IGZvcm1hdENoYXIgPSBwYXR0ZXJuT3B0aW9uc1tpXS5wYXR0ZXJuVmFsdWVbMF07XHJcbiAgICAgICAgICAgICAgICBsZXQgaW50bE9wdGlvblZhbHVlID0gb3B0aW9uc1twYXR0ZXJuT3B0aW9uc1tpXS5pbnRsT3B0aW9uXTtcclxuICAgICAgICAgICAgICAgIGlmIChpbnRsT3B0aW9uVmFsdWUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBuZXdQYXR0ZXJuVmFsdWUgPSB0aGlzLnByZXBhcmVEYXRlRWxlbWVudChpbnRsT3B0aW9uVmFsdWUsIGZvcm1hdENoYXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHBhdHRlcm5PcHRpb25zW2ldLnBhdHRlcm5WYWx1ZSA9IG5ld1BhdHRlcm5WYWx1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgaiA9IGkgLSAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAocGF0dGVybk9wdGlvbnNbal0gJiYgcGF0dGVybk9wdGlvbnNbal0uaXNEYXRlRWxlbWVudCA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXR0ZXJuT3B0aW9uc1tqXS5wYXR0ZXJuVmFsdWUgIT09IFwiIFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhdHRlcm5PcHRpb25zW2pdLnBhdHRlcm5WYWx1ZSAhPT0gJ1wiJyAmJiBwYXR0ZXJuT3B0aW9uc1tqXS5wYXR0ZXJuVmFsdWUgIT09IFwiJ1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdHRlcm5PcHRpb25zW2pdLnBhdHRlcm5WYWx1ZSA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0dGVybk9wdGlvbnNbal0ucGF0dGVyblZhbHVlID0gXCJcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGotLTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBwYXR0ZXJuT3B0aW9uc1tpXS5wYXR0ZXJuVmFsdWUgPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCByZXN1bHQgPSBbXTtcclxuICAgICAgICBsZXQgaSA9IDA7XHJcbiAgICAgICAgd2hpbGUgKHBhdHRlcm5PcHRpb25zW2ldLnBhdHRlcm5WYWx1ZSA9PT0gXCJcIiB8fCBwYXR0ZXJuT3B0aW9uc1tpXS5pc0RhdGVFbGVtZW50ID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICBpKys7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvciAoaTsgaSA8IHBhdHRlcm5PcHRpb25zTGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgcmVzdWx0LnB1c2gocGF0dGVybk9wdGlvbnNbaV0ucGF0dGVyblZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdC5qb2luKFwiXCIpO1xyXG4gICAgfVxyXG4gICAgZm9ybWF0TmF0aXZlKHBhdHRlcm4sIGxvY2FsZSwgZGF0ZSkge1xyXG4gICAgICAgIHJldHVybiBcIlwiO1xyXG4gICAgfVxyXG4gICAgZ2V0IHByZXBhcmVkUGF0dGVybigpIHtcclxuICAgICAgICBpZiAoIXRoaXMuX3ByZXBhcmVkUGF0dGVybikge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5wYXR0ZXJuKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9wcmVwYXJlZFBhdHRlcm4gPSB0aGlzLnBhdHRlcm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocmVzb2x2ZWRQYXR0ZXJucy5oYXMoeyBsb2NhbGU6IHRoaXMubG9jYWxlLCBvcHRpb25zOiB0aGlzLm9wdGlvbnMgfSkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9wcmVwYXJlZFBhdHRlcm4gPSByZXNvbHZlZFBhdHRlcm5zLmdldCh7IGxvY2FsZTogdGhpcy5sb2NhbGUsIG9wdGlvbnM6IHRoaXMub3B0aW9ucyB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3ByZXBhcmVkUGF0dGVybiA9IHRoaXMucHJlcGFyZVBhdHRlcm4odGhpcy5nZXRDb3JyZWN0UGF0dGVybkZvckxvY2FsZSgpLCB0aGlzLm9wdGlvbnMpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmVkUGF0dGVybnMuc2V0KHsgbG9jYWxlOiB0aGlzLmxvY2FsZSwgb3B0aW9uczogdGhpcy5vcHRpb25zIH0sIHRoaXMuX3ByZXBhcmVkUGF0dGVybik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ByZXBhcmVkUGF0dGVybjtcclxuICAgIH1cclxuICAgIGZvcm1hdChkYXRlKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZm9ybWF0TmF0aXZlKHRoaXMucHJlcGFyZWRQYXR0ZXJuLCB0aGlzLmxvY2FsZSwgZGF0ZSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0IGNsYXNzIE51bWJlckZvcm1hdCB7XHJcbiAgICBjb25zdHJ1Y3Rvcihsb2NhbGUsIG9wdGlvbnMsIHBhdHRlcm4pIHtcclxuICAgICAgICB0aGlzLmxvY2FsZSA9IGxvY2FsZTtcclxuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xyXG4gICAgICAgIHRoaXMucGF0dGVybiA9IHBhdHRlcm47XHJcbiAgICB9XHJcbiAgICBmb3JtYXROYXRpdmUodmFsdWUsIGxvY2FsZSwgb3B0aW9ucywgcGF0dGVybikge1xyXG4gICAgICAgIHJldHVybiBcIlwiO1xyXG4gICAgfVxyXG4gICAgZm9ybWF0KHZhbHVlKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZm9ybWF0TmF0aXZlKHZhbHVlLCB0aGlzLmxvY2FsZSwgdGhpcy5vcHRpb25zLCB0aGlzLnBhdHRlcm4pO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IERhdGVUaW1lRm9ybWF0IGFzIGNvbW1vbkRhdGVUaW1lRm9ybWF0LCBOdW1iZXJGb3JtYXQgYXMgY29tbW9uTnVtYmVyRm9ybWF0LCBGVUxMIH0gZnJvbSBcIi4vbmF0aXZlc2NyaXB0LWludGwtY29tbW9uXCI7XHJcbmV4cG9ydCBjbGFzcyBEYXRlVGltZUZvcm1hdCBleHRlbmRzIGNvbW1vbkRhdGVUaW1lRm9ybWF0IHtcclxuICAgIGdldE5hdGl2ZVBhdHRlcm4ocGF0dGVybkRlZmluaXRpb24sIGxvY2FsZSkge1xyXG4gICAgICAgIGxldCBkYXRlRm9ybWF0dGVyID0gTlNEYXRlRm9ybWF0dGVyLm5ldygpO1xyXG4gICAgICAgIGlmIChsb2NhbGUpIHtcclxuICAgICAgICAgICAgZGF0ZUZvcm1hdHRlci5sb2NhbGUgPSBOU0xvY2FsZS5hbGxvYygpLmluaXRXaXRoTG9jYWxlSWRlbnRpZmllcihsb2NhbGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocGF0dGVybkRlZmluaXRpb24uZGF0ZSkge1xyXG4gICAgICAgICAgICBkYXRlRm9ybWF0dGVyLmRhdGVTdHlsZSA9IHBhdHRlcm5EZWZpbml0aW9uLmRhdGUgPT09IEZVTEwgP1xyXG4gICAgICAgICAgICAgICAgNCA6XHJcbiAgICAgICAgICAgICAgICAxO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocGF0dGVybkRlZmluaXRpb24udGltZSkge1xyXG4gICAgICAgICAgICBkYXRlRm9ybWF0dGVyLnRpbWVTdHlsZSA9IDM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBkYXRlRm9ybWF0dGVyLmRhdGVGb3JtYXQ7XHJcbiAgICB9XHJcbiAgICBmb3JtYXROYXRpdmUocGF0dGVybiwgbG9jYWxlLCBkYXRlKSB7XHJcbiAgICAgICAgbGV0IGRhdGVGb3JtYXR0ZXIgPSBOU0RhdGVGb3JtYXR0ZXIubmV3KCk7XHJcbiAgICAgICAgaWYgKGxvY2FsZSkge1xyXG4gICAgICAgICAgICBkYXRlRm9ybWF0dGVyLmxvY2FsZSA9IE5TTG9jYWxlLmFsbG9jKCkuaW5pdFdpdGhMb2NhbGVJZGVudGlmaWVyKGxvY2FsZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGRhdGVGb3JtYXR0ZXIuZGF0ZUZvcm1hdCA9IHBhdHRlcm47XHJcbiAgICAgICAgcmV0dXJuIGRhdGVGb3JtYXR0ZXIuc3RyaW5nRnJvbURhdGUoZGF0ZSA/IGRhdGUgOiBuZXcgRGF0ZSgpKTtcclxuICAgIH1cclxufVxyXG5leHBvcnQgY2xhc3MgTnVtYmVyRm9ybWF0IGV4dGVuZHMgY29tbW9uTnVtYmVyRm9ybWF0IHtcclxuICAgIGZvcm1hdE5hdGl2ZSh2YWx1ZSwgbG9jYWxlLCBvcHRpb25zLCBwYXR0ZXJuKSB7XHJcbiAgICAgICAgbGV0IG51bWJlckZvcm1hdCA9IE5TTnVtYmVyRm9ybWF0dGVyLm5ldygpO1xyXG4gICAgICAgIGlmIChsb2NhbGUpIHtcclxuICAgICAgICAgICAgbnVtYmVyRm9ybWF0LmxvY2FsZSA9IE5TTG9jYWxlLmFsbG9jKCkuaW5pdFdpdGhMb2NhbGVJZGVudGlmaWVyKGxvY2FsZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChvcHRpb25zKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAob3B0aW9ucy5zdHlsZS50b0xvd2VyQ2FzZSgpKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiZGVjaW1hbFwiOlxyXG4gICAgICAgICAgICAgICAgICAgIG51bWJlckZvcm1hdC5udW1iZXJTdHlsZSA9IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwicGVyY2VudFwiOlxyXG4gICAgICAgICAgICAgICAgICAgIG51bWJlckZvcm1hdC5udW1iZXJTdHlsZSA9IDM7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiY3VycmVuY3lcIjpcclxuICAgICAgICAgICAgICAgICAgICBudW1iZXJGb3JtYXQubnVtYmVyU3R5bGUgPSAyO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLmN1cnJlbmN5ICE9PSB2b2lkIDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnVtYmVyRm9ybWF0LmN1cnJlbmN5Q29kZSA9IG9wdGlvbnMuY3VycmVuY3k7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBudW1iZXJGb3JtYXQubnVtYmVyU3R5bGUgPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBudW1iZXJGb3JtYXQubnVtYmVyU3R5bGUgPSAxO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLm1pbmltdW1JbnRlZ2VyRGlnaXRzICE9PSB2b2lkIDApIHtcclxuICAgICAgICAgICAgbnVtYmVyRm9ybWF0Lm1pbmltdW1JbnRlZ2VyRGlnaXRzID0gb3B0aW9ucy5taW5pbXVtSW50ZWdlckRpZ2l0cztcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5taW5pbXVtRnJhY3Rpb25EaWdpdHMgIT09IHZvaWQgMCkge1xyXG4gICAgICAgICAgICBudW1iZXJGb3JtYXQubWluaW11bUZyYWN0aW9uRGlnaXRzID0gb3B0aW9ucy5taW5pbXVtRnJhY3Rpb25EaWdpdHM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMubWF4aW11bUZyYWN0aW9uRGlnaXRzICE9PSB2b2lkIDApIHtcclxuICAgICAgICAgICAgbnVtYmVyRm9ybWF0Lm1heGltdW1GcmFjdGlvbkRpZ2l0cyA9IG9wdGlvbnMubWF4aW11bUZyYWN0aW9uRGlnaXRzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLnVzZUdyb3VwaW5nICE9PSB2b2lkIDApIHtcclxuICAgICAgICAgICAgbnVtYmVyRm9ybWF0LnVzZXNHcm91cGluZ1NlcGFyYXRvciA9IG9wdGlvbnMudXNlR3JvdXBpbmc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChwYXR0ZXJuKSB7XHJcbiAgICAgICAgICAgIG51bWJlckZvcm1hdC5wb3NpdGl2ZUZvcm1hdCA9IHBhdHRlcm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAob3B0aW9ucyAmJiAob3B0aW9ucy5zdHlsZS50b0xvd2VyQ2FzZSgpID09PSBcImN1cnJlbmN5XCIgJiYgb3B0aW9ucy5jdXJyZW5jeURpc3BsYXkgPT09IFwiY29kZVwiKSkge1xyXG4gICAgICAgICAgICAgICAgbGV0IHRlbXBQYXR0ZXJuID0gbnVtYmVyRm9ybWF0LnBvc2l0aXZlRm9ybWF0O1xyXG4gICAgICAgICAgICAgICAgdGVtcFBhdHRlcm4gPSB0ZW1wUGF0dGVybi5yZXBsYWNlKFwiwqRcIiwgXCLCpMKkXCIpO1xyXG4gICAgICAgICAgICAgICAgbnVtYmVyRm9ybWF0LnBvc2l0aXZlRm9ybWF0ID0gdGVtcFBhdHRlcm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG51bWJlckZvcm1hdC5zdHJpbmdGcm9tTnVtYmVyKHZhbHVlKTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBEYXRlVGltZUZvcm1hdCwgTnVtYmVyRm9ybWF0IH0gZnJvbSBcIi4vbmF0aXZlc2NyaXB0LWludGxcIjtcclxuZXhwb3J0IHsgRGF0ZVRpbWVGb3JtYXQsIE51bWJlckZvcm1hdCB9IGZyb20gXCIuL25hdGl2ZXNjcmlwdC1pbnRsXCI7XHJcbmlmICghZ2xvYmFsLkludGwpIHtcclxuICAgIGdsb2JhbC5JbnRsID0ge307XHJcbn1cclxuZ2xvYmFsLkludGwuRGF0ZVRpbWVGb3JtYXQgPSBEYXRlVGltZUZvcm1hdDtcclxuZ2xvYmFsLkludGwuTnVtYmVyRm9ybWF0ID0gTnVtYmVyRm9ybWF0O1xyXG4iXSwibmFtZXMiOlsiRGF0ZVRpbWVGb3JtYXQiLCJOdW1iZXJGb3JtYXQiLCJjb21tb25EYXRlVGltZUZvcm1hdCIsImNvbW1vbk51bWJlckZvcm1hdCJdLCJtYXBwaW5ncyI6Ijs7OztBQUFPLE1BQU0sT0FBTyxHQUFHLFNBQVMsQ0FBQztBQUNqQyxBQUFPLE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQztBQUMzQixBQUFPLE1BQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQztBQUM3QixBQUFPLE1BQU0sUUFBUSxHQUFHLFNBQVMsQ0FBQztBQUNsQyxBQUFPLE1BQU0sSUFBSSxH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
